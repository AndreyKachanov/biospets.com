<?php namespace App\Models;

use Illuminate\Database\Eloquent\SoftDeletes;
use Cviebrock\EloquentSluggable\Sluggable;

/**
 * Eloquent class to describe the analyses table
 * 
 * automatically generated by ModelGenerator.php
 *
 * @property int $id
 * @property int $is_active
 * @property int $is_promoted
 * @property string|null $material
 * @property string|null $preparation
 * @property string|null $title
 * @property string|null $title_lat
 * @property string|null $description
 * @property string|null $method
 * @property string|null $result
 * @property int|null $term
 * @property float|null $price
 * @property float|null $discount
 * @property string|null $code
 * @property string|null $slug
 * @property string|null $meta_title
 * @property string|null $meta_description
 * @property string|null $meta_keywords
 * @property int|null $created_by_user_id
 * @property int|null $updated_by_user_id
 * @property int|null $category_id
 * @property int $is_complex
 * @property string|null $first_letter
 * @property \Carbon\Carbon|null $deleted_at
 * @property string|null $created_at
 * @property string|null $updated_at
 * @property-read \App\Models\AnalyseCategory|null $rAnalysesCategories
 * @property-read \App\Models\User|null $rUserCreated
 * @property-read \App\Models\User|null $rUserUpdated
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse findSimilarSlugs($attribute, $config, $slug)
 * @method static bool|null forceDelete()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Analyse onlyTrashed()
 * @method static bool|null restore()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereCategoryId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereCode($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereCreatedByUserId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereDiscount($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereFirstLetter($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereIsActive($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereIsComplex($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereIsPromoted($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereMaterial($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereMetaDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereMetaKeywords($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereMetaTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereMethod($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse wherePreparation($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse wherePrice($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereResult($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereSlug($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereTerm($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereTitleLat($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\Analyse whereUpdatedByUserId($value)
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Analyse withTrashed()
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Analyse withoutTrashed()
 * @mixin \Eloquent
 */
class Analyse extends \Illuminate\Database\Eloquent\Model
{
    use SoftDeletes, Sluggable;

    const STATUS_NOT_ACTIVE = 0;
    const STATUS_ACTIVE = 1;

    /**
     * @var string
     */
    protected $table = 'analyses';

    /**
     * @return array
     */
    public function getDates()
    {
        return ['deleted_at'];
    }

    /**
     * @var array
     */
    protected $fillable = [
        'is_active', 'is_promoted', 'material', 'preparation', 'title', 'title_lat',
        'description', 'method', 'result', 'term', 'price', 'discount', 'code', 'slug', 'meta_title', 'meta_description',
        'meta_keywords', 'deleted_at', 'first_letter', 'category_id', 'created_by_user_id', 'updated_by_user_id', 'new', 'updated'
    ];

    /**
     * @return array
     */
    public function sluggable()
    {
        return [
            'slug' => [
                'source' => 'title',
            ]
        ];
    }

    /**
     * @param $value
     */
    public function setFirstLetterAttribute($value)
    {
        $s = mb_substr($value, 0, 1);

        if (preg_match('/[а-яА-ЯЁё]/u', $s)) {
            $this->attributes['first_letter'] = mb_strtoupper($s);

        } elseif (preg_match('/[a-zA-Z]/', $s)) {
            $this->attributes['first_letter'] = 'A-Z';

        } elseif (preg_match('/[0-9]/', $s)) {
            $this->attributes['first_letter'] = '0-9';

        }
    }

    /**
     * @param $letter
     * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator
     */
    public static function fetchAllAnalyses($letter)
    {
        $analyses = Analyse::whereIsActive(true)
            ->orderBy('title')
            ->paginate(config('app.pagination_default_value'));

        if ($letter != 'all') {
            $analyses = Analyse::whereIsActive(true)
                ->whereFirstLetter($letter)
                ->orderBy('title')
                ->paginate(config('app.pagination_default_value'));
        }

        return $analyses;
    }

    /**
     * Selection of analyzes from the category + from subcategories. Sampling of all and with 1 letter in mind.
     *
     * @param $letter
     * @param $category
     * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator
     */
    public static function fetchAnalysesWithCategoryAndSubcategories($letter, AnalyseCategory $category)
    {
        $analyses = Analyse::whereHas('rAnalysesCategories', function ($query) use ($category) {
            /** @var AnalyseCategory $query */
            $query->whereParentId($category->id)
                ->orWhere('id', $category->id);
        })->whereIsActive(true)
            ->orderBy('title')
            ->paginate(config('app.pagination_default_value'));

        if ($letter != 'all') {
            $analyses = Analyse::whereHas('rAnalysesCategories', function ($query) use ($category) {
                /** @var AnalyseCategory $query */
                $query->whereParentId($category->id)
                    ->orWhere('id', $category->id);
            })->whereIsActive(true)
                ->whereFirstLetter($letter)
                ->orderBy('title')
                ->paginate(config('app.pagination_default_value'));
        }

        return $analyses;
    }


    /**
     * Fetch analyses without sub categories
     *
     * @param $letter
     * @param $category
     * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator
     */
    public static function fetchAnalysesWithoutSubcategories($letter, $category)
    {
        $analyses = Analyse::where('is_active', 1)
            ->where('category_id', $category->id)
            ->orderBy('title')
            ->paginate(config('app.pagination_default_value'));

        if ($letter != 'all') {
            $analyses = Analyse::where('is_active', 1)
                ->where('category_id', $category->id)
                ->where('first_letter', $letter)
                ->orderBy('title')
                ->paginate(config('app.pagination_default_value'));
        }

        return $analyses;
    }

    /**
     * @param $items
     * @return Analyse[]|\Illuminate\Database\Eloquent\Collection|\Illuminate\Support\Collection
     */
    public static function getAnalysesForGoogleSheetsWithCategory($items)
    {
        $analysesTable = (new Analyse())->getTable();

        // extracts non-duplicating codes
        $analyzesWithoutDuplication = Analyse::withTrashed()
            ->whereIn('code', function ($query) use ($analysesTable) {
                /** @var Analyse $query */
                $query->select('code')
                    ->from($analysesTable)
                    ->groupBy('code')
                    ->havingRaw('count(code) = 1');
            })->whereIn('category_id', $items['array'])
            ->get();

        // extracts only not deleted in duplication codes
        $analyzesWithDuplicationActive = Analyse::withTrashed()
            ->whereIn('code', function ($query) use ($analysesTable) {
                /** @var Analyse $query */
                $query->select('code')
                    ->from($analysesTable)
                    ->groupBy('code')
                    ->havingRaw('count(code) > 1');
            })->whereNull('deleted_at')
            ->whereIn('category_id', $items['array'])
            ->get();

        // extracts max deleted_date row in only duplication removes codes
        $analyzesMaxDeleted = Analyse::withTrashed()
            ->whereIn('deleted_at', function ($query) use ($analysesTable) {
                /** @var Analyse $query */
                $query->selectRaw('MAX(deleted_at)')
                    ->from($analysesTable)
                    ->whereNotNull('deleted_at')
                    ->groupBy('code')
                    ->havingRaw('count(code) >= 1');
            })->whereIn('category_id', $items['array'])
            ->get();

        // объединяем 3 подколлекции в 1
        $mergedCollectionHasCategory = $analyzesWithoutDuplication
            ->merge($analyzesWithDuplicationActive)
            ->merge($analyzesMaxDeleted);

        // выбираем уникальные записи
        $uniqueCollectionHasCategory = $mergedCollectionHasCategory->unique('code');

        return $uniqueCollectionHasCategory;
    }

    /**
     * @return Analyse[]|\Illuminate\Database\Eloquent\Collection|\Illuminate\Support\Collection
     */
    public static function getAnalysesForGoogleSheetsWithoutCategory()
    {
        $analysesTable = (new Analyse())->getTable();

        // extracts non-duplicating codes
        $analyzesWithoutDuplicationNotCategory = Analyse::withTrashed()
            ->whereIn('code', function ($query) use ($analysesTable) {
                /** @var Analyse $query */
                $query->select('code')
                    ->from($analysesTable)
                    ->groupBy('code')
                    ->havingRaw('count(code) = 1');
            })->whereNull('category_id')
            ->get();

        // extracts only not deleted in duplication codes
        $analyzesWithDuplicationActiveNotCategory = Analyse::withTrashed()
            ->whereIn('code', function ($query) use ($analysesTable) {
                /** @var Analyse $query */
                $query->select('code')
                    ->from($analysesTable)
                    ->groupBy('code')
                    ->havingRaw('count(code) > 1');
            })->whereNull('deleted_at')
            ->whereNull('category_id')
            ->get();

        // extracts max deleted_date row in only duplication removes codes
        $analyzesMaxDeletedNotCategory = Analyse::withTrashed()
            ->whereIn('deleted_at', function ($query) use ($analysesTable) {
                /** @var Analyse $query */
                $query->selectRaw('MAX(deleted_at)')
                    ->from($analysesTable)
                    ->whereNull('category_id')
                    ->whereNotNull('deleted_at')
                    ->groupBy('code')
                    ->havingRaw('count(code) >= 1');
            })
            ->get();

        $mergedCollectionNotCategory = $analyzesWithoutDuplicationNotCategory
            ->merge($analyzesWithDuplicationActiveNotCategory)
            ->merge($analyzesMaxDeletedNotCategory);

        // unique in 3 collection
        $uniqueNotCategory = $mergedCollectionNotCategory->unique('code');
        return $uniqueNotCategory;
    }


    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function rAnalysesCategories()
    {
        return $this->belongsTo('App\Models\AnalyseCategory', 'category_id', 'id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function rUserCreated()
    {
        return $this->belongsTo(User::class, 'created_by_user_id', 'id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function rUserUpdated()
    {
        return $this->belongsTo(User::class, 'updated_by_user_id', 'id');
    }

}
